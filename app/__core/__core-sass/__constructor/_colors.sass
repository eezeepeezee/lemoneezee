/* *
 *
 * Generating css custom properties based on color schemes settings.
 * Older browsers are supported via converting css vars into values on 'gulp build'. 
 *
 * */

/* Creating black, white and base gray colors */
  
$c-white-rgb: red($c-white)
$c-black-rgb: red($c-black)
$diff: abs($c-white-rgb - $c-black-rgb)
$step: ceil($diff / ($base-adjust-steps + 1))
\:root,:root[data-scheme="default"]
  --c-white: rgb(#{$c-white-rgb}, #{$c-white-rgb}, #{$c-white-rgb})
  $k: 1
  @for $i from $base-adjust-steps through 1
    --c-gray-#{$k}: rgb(#{$step * $i}, #{$step * $i}, #{$step * $i})
    $k: $k + 1
  --c-black: rgb(#{$c-black-rgb}, #{$c-black-rgb}, #{$c-black-rgb})  
  
  
/* Generating color schemes */
  
$map-percentage: 8 16 24 32 40

@function adjust($color, $i, $action)
  @if $action == 'darken'
    @return adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / -100))
  @else
    @return adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / 100))
  
=get-colors($c-theme-colors)
  @each $c-color-name, $c-color-value in $c-theme-colors
    --c-#{$c-color-name}: #{$c-color-value}
    @if (($scheme-adjust-steps > 0) and ($scheme-adjust-steps < 6))
      $adjust-actions: (l: lighten, d: darken)
      @each $action-k, $action-v in $adjust-actions
        @for $k from 1 through $scheme-adjust-steps
          --c-#{$c-color-name}-#{$action-k}-#{$k}: #{adjust($c-color-value, $k, $action-v)}    
    
@each $c-theme-name, $c-theme-colors in $map-color-schemes
  @if $c-theme-name == 'default'
    \:root,:root[data-scheme="default"]
      +get-colors($c-theme-colors)
  @else
    \:root[data-scheme="#{$c-theme-name}"]
      +get-colors($c-theme-colors)
