{"version":3,"sources":["__constructor/_colors.sass"],"names":[],"mappings":"AAaC,iCACC,eAAU,AAGR,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,mBAAwB,AAAxB,oBAAwB,AAE1B,kBAAU,AAeR,kBAAyB,AAKnB,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AALpD,mBAAyB,AAKnB,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AALpD,oBAAyB,AAKnB,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AALpD,oBAAyB,AAKnB,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AALpD,mBAAyB,AAKnB,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AALpD,iBAAyB,AAKnB,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AALpD,wBAAyB,AAKnB,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,2BAA8C,CApB5C","file":"../color-vars.min.css","sourcesContent":["/* *\n *\n * Generating css custom properties based on color schemes settings.\n * Older browsers are supported via converting css vars into values on 'gulp build'.\n *\n * */\n\n/* Creating black, white and base gray colors */\n\n$c-white-rgb: red($c-white);\n$c-black-rgb: red($c-black);\n$diff: abs($c-white-rgb - $c-black-rgb);\n$step: ceil($diff / ($base-adjust-steps + 1));\n :root,:root[data-scheme=\"default\"] {\n  --c-white: rgb(#{$c-white-rgb}, #{$c-white-rgb}, #{$c-white-rgb});\n  $k: 1;\n  @for $i from $base-adjust-steps through 1 {\n    --c-gray-#{$k}: rgb(#{$step * $i}, #{$step * $i}, #{$step * $i});\n    $k: $k + 1; }\n  --c-black: rgb(#{$c-black-rgb}, #{$c-black-rgb}, #{$c-black-rgb}); }\n\n\n/* Generating color schemes */\n\n$map-percentage: 8 16 24 32 40;\n\n@function adjust($color, $i, $action) {\n  @if $action == 'darken' {\n    @return adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / -100)); }\n  @else {\n    @return adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / 100)); } }\n\n@mixin get-colors($c-theme-colors) {\n  @each $c-color-name, $c-color-value in $c-theme-colors {\n    --c-#{$c-color-name}: #{$c-color-value};\n    @if (($scheme-adjust-steps > 0) and ($scheme-adjust-steps < 6)) {\n      $adjust-actions: (l: lighten, d: darken);\n      @each $action-k, $action-v in $adjust-actions {\n        @for $k from 1 through $scheme-adjust-steps {\n          --c-#{$c-color-name}-#{$action-k}-#{$k}: #{adjust($c-color-value, $k, $action-v)}; } } } } }\n\n@each $c-theme-name, $c-theme-colors in $map-color-schemes {\n  @if $c-theme-name == 'default' {\n     :root,:root[data-scheme=\"default\"] {\n      @include get-colors($c-theme-colors); } }\n  @else {\n     :root[data-scheme=\"#{$c-theme-name}\"] {\n      @include get-colors($c-theme-colors); } } }\n"]}