{"version":3,"sources":["__constructor/_colors.sass"],"names":[],"mappings":"AAaC,iCACC,sBAAU,AAIN,uBAAwB,AAAxB,uBAAwB,AAAxB,uBAAwB,AAAxB,uBAAwB,AAAxB,uBAAwB,AAAxB,uBAAwB,AAAxB,oBAAwB,AAAxB,oBAAwB,AAAxB,oBAAwB,AAAxB,qBAAwB,AAE5B,mBAAU,AAqBR,oBAAyB,AAKnB,yBAA8C,AAA9C,yBAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AALpD,qBAAyB,AAKnB,yBAA8C,AAA9C,yBAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,wBAA8C,AAA9C,uBAA8C,AAA9C,qBAA8C,AALpD,sBAAyB,AAKnB,0BAA8C,AAA9C,2BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,yBAA8C,AAA9C,wBAA8C,AAA9C,uBAA8C,AALpD,uBAAyB,AAKnB,2BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,yBAA8C,AAA9C,wBAA8C,AALpD,qBAAyB,AAKnB,yBAA8C,AAA9C,yBAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,uBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AALpD,mBAAyB,AAKnB,wBAA8C,AAA9C,wBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,uBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AAA9C,qBAA8C,AAA9C,qBAA8C,AALpD,2BAAyB,AAKnB,+BAA8C,AAA9C,+BAA8C,AAA9C,gCAA8C,AAA9C,gCAA8C,AAA9C,gCAA8C,AAA9C,+BAA8C,AAA9C,8BAA8C,AAA9C,8BAA8C,AAA9C,4BAA8C,AAA9C,2BAA8C,CA1B5C,AAiCP,+BAZD,oBAAyB,AAKnB,yBAA8C,AAA9C,yBAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,wBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,sBAA8C,AAA9C,sBAA8C,AALpD,uBAAyB,AAKnB,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AALpD,sBAAyB,AAKnB,0BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,4BAA8C,AAA9C,4BAA8C,AAA9C,0BAA8C,AAA9C,0BAA8C,AAA9C,wBAA8C,AAA9C,wBAA8C,AAA9C,sBAA8C,AALpD,qBAAyB,AAKnB,yBAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,2BAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,sBAA8C,AALpD,oBAAyB,AAKnB,wBAA8C,AAA9C,wBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,yBAA8C,AAA9C,wBAA8C,AAA9C,uBAA8C,AAA9C,uBAA8C,AAA9C,sBAA8C,AAA9C,oBAA8C,CAAA","file":"../color-vars.min.css","sourcesContent":["/* *\n *\n * Generating css custom properties based on color schemes settings.\n * Older browsers are supported via converting css vars into values on 'gulp build'.\n *\n * */\n\n/* Creating black, white and base gray colors */\n\n$c-white-rgb: red($c-white);\n$c-black-rgb: red($c-black);\n$diff: abs($c-white-rgb - $c-black-rgb);\n$step: ceil($diff / ($base-adjust-steps + 1));\n :root,:root[data-scheme=\"default\"] {\n  --c-white: #{$c-white-rgb}, #{$c-white-rgb}, #{$c-white-rgb};\n  @if (($base-adjust-steps > 0) and ($base-adjust-steps <= 20)) {\n    $k: 1;\n    @for $i from $base-adjust-steps through 1 {\n      --c-gray-#{$k}: #{$step * $i}, #{$step * $i}, #{$step * $i};\n      $k: $k + 1; } }\n  --c-black: #{$c-black-rgb}, #{$c-black-rgb}, #{$c-black-rgb}; }\n\n\n/* Generating color schemes */\n\n$map-percentage: 8 16 24 32 40;\n\n@function adjust($r, $g, $b, $i, $action) {\n  $color: rgb($r, $g, $b);\n  @if $action == 'darken' {\n    $color: adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / -100));\n    @return #{round(red($color))}, #{round(green($color))}, #{round(blue($color))}; }\n  @else {\n    $color: adjust-color($color, $lightness: percentage(nth($map-percentage, $i) / 100));\n    @return #{round(red($color))}, #{round(green($color))}, #{round(blue($color))}; } }\n\n@mixin get-colors($c-theme-colors) {\n  @each $c-color-name, $c-color-value in $c-theme-colors {\n    $r: round(red($c-color-value));\n    $g: round(green($c-color-value));\n    $b: round(blue($c-color-value));\n    --c-#{$c-color-name}: #{$r}, #{$g}, #{$b};\n    @if (($scheme-adjust-steps > 0) and ($scheme-adjust-steps < 6)) {\n      $adjust-actions: (l: lighten, d: darken);\n      @each $action-k, $action-v in $adjust-actions {\n        @for $k from 1 through $scheme-adjust-steps {\n          --c-#{$c-color-name}-#{$action-k}-#{$k}: #{adjust($r, $g, $b, $k, $action-v)}; } } } } }\n\n@each $c-theme-name, $c-theme-colors in $map-color-schemes {\n  @if $c-theme-name == 'default' {\n     :root,:root[data-scheme=\"default\"] {\n      @include get-colors($c-theme-colors); } }\n  @else {\n     :root[data-scheme=\"#{$c-theme-name}\"] {\n      @include get-colors($c-theme-colors); } } }\n"]}